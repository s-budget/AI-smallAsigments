if (pocetni.getClanovi().containsAll(negiraniUzrok))
{
    promjena = true;
    HashSet<Atom> temp = new HashSet<>();
    for (Atom a : pocetni.getClanovi()) {
        if (!negiraniUzrok.contains(a)) {
            temp.add(new Atom(a.getOznaka(), a.isNegated()));
        }
    }
    trebaIzbrisati.add(pocetni);
    if (temp.size() == 0) {
        deductedFrom.put("#NILL", new Pair<>(pocetni.getOriginalniOblik(), dodatni1.getOriginalniOblik()));
        IspisTrue(deductedFrom, pocetniIzrazi, cilj.getOriginalniOblik());
        return true;
    }
    Izraz tempIzraz = new Izraz(temp);
    dodatniSkup.add(tempIzraz);
    red.add(tempIzraz);
    deductedFrom.put(tempIzraz.getOriginalniOblik(), new Pair<>(pocetni.getOriginalniOblik(), dodatni1.getOriginalniOblik()));

} else if (negiraniUzrok.containsAll(pocetni.getClanovi())) {
    promjena = true;
    HashSet<Atom> temp = new HashSet<>();
    for (Atom a : negiraniUzrok) {


        if (!pocetni.getClanovi().contains(a)) {
            temp.add(new Atom(a.getOznaka(), !a.isNegated()));
        }

    }
    trebaIzbrisati.add(dodatni1);
    if (temp.size() == 0) {
        deductedFrom.put("#NILL", new Pair<>(pocetni.getOriginalniOblik(), dodatni1.getOriginalniOblik()));
        IspisTrue(deductedFrom, pocetniIzrazi, cilj.getOriginalniOblik());

        return true;

    }
    Izraz tempIzraz = new Izraz(temp);
    dodatniSkup.add(tempIzraz);
    red.add(tempIzraz);
    deductedFrom.put(tempIzraz.getOriginalniOblik(), new Pair<>(pocetni.getOriginalniOblik(), dodatni1.getOriginalniOblik()));
    break;
}